// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "./interface.sol";

// NOT THE EXPLOIT. JUST A TEST VARIANT. The reproduced attack is at shido.t.sol
// Swap 39 BNB to SHIDO, call lock and claim, and swap SHIDOV2 back to BNB. Attacker does not profit. 

contract ShidoTest is Test {
        IERC20 BUSD = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IERC20 BTCB = IERC20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);
    IERC20 WBNB = IERC20(payable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c));
    IERC20 Shido = IERC20(0x733Af324146DCfe743515D8D77DC25140a07F9e0);
    IERC20 ShidoV2 = IERC20(0xa963eE460Cf4b474c35ded8fFF91c4eC011FB640);
    IDPPOracle DPPAdvanced =
        IDPPOracle(0x81917eb96b397dFb1C6000d28A5bc08c0f05fC1d);
    IPancakeRouter Router =
        IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IPancakePair ShidoV2Pair =
        IPancakePair(0x0fb0dA54b6eF183fB4b67BFe01af44e06D576Ef3);
    IPancakePair ShidoPair =
        IPancakePair(0xd0A167d1973cA8f76723C6FEa1E6f608DBC1d464);
    ILiquidity LiquidityContract =
        ILiquidity(0x9869674E80D632F93c338bd398408273D20a6C8e);
    IShidoContract ShidoContract =
        IShidoContract(0xaF0CA21363219C8f3D8050E7B61Bb5f04e02F8D4);
            IPancakePair BTCBUSDPair =
        IPancakePair(0x3F803EC2b816Ea7F06EC76aA2B6f2532F9892d62);

    function setUp() external {
        vm.createSelectFork("https://rpc.ankr.com/bsc", 29365170);
        vm.label(address(Router), "Router");
        vm.label(address(WBNB), "WBNB");
        vm.label(address(Shido), "Shido");
        vm.label(address(LiquidityContract), "LiquidityContract");
        vm.label(address(ShidoPair), "ShidoPair");
        vm.label(address(this), "Attacker");
    }

    function testTry() external {
        deal(address(WBNB), address(this), 1000e18);
        console.log("Attacker WBNB Balance:", WBNB.balanceOf(address(this))/1e18);
        console.log("Attacker SHIDO Balance:", Shido.balanceOf(address(this)));
        WBNB.approve(address(Router), type(uint256).max);
        console.log("Pool WBNB Balance:", WBNB.balanceOf(address(ShidoPair)));
        console.log("Pool SHIDO Balance:", Shido.balanceOf(address(ShidoPair)));
        address[] memory path = new address[](2);
        path[0] = address(WBNB);
        path[1] = address(Shido);
        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            39e18,
            0,
            path,
            address(this),
            block.timestamp + 1000
        );
        ShidoV2.approve(address(Router), type(uint256).max);
        Shido.approve(address(ShidoContract), type(uint256).max);
        ShidoContract.lockTokens();
        ShidoContract.claimTokens();
        path[0] = address(ShidoV2);
        path[1] = address(WBNB);
        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            ShidoV2.balanceOf(address(this)),
            0,
            path,
            address(this),
            block.timestamp + 1000
        );
        console.log(
            "Attacker WBNB Balance after swap:",
            WBNB.balanceOf(address(this))/1e18
        );
        console.log(
            "Attacker ShidoV2 Balance after swap:",
            Shido.balanceOf(address(this))
        );

    }
}
